plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.2'
//    id "org.openapi.generator" version "4.3.1"
    id "com.google.cloud.tools.jib" version "3.1.2"
}

apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'org.openapi.generator'
apply plugin: 'com.google.cloud.tools.jib'
//apply from: 'gradle/swagger.gradle'
apply from: 'gradle/docker.gradle'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
def generated = 'src/main/generated'
sourceCompatibility = '11'

ext {
    javaMainClass = "com.starter.MSAStarterApplication"
}
application {
    mainClassName = javaMainClass
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-actuator') {
        exclude module: 'micrometer-core'
    }
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.retry:spring-retry'

    // queryDSL
    implementation "com.querydsl:querydsl-core:${querydsl_version}"
    implementation "com.querydsl:querydsl-jpa:${querydsl_version}"
    implementation "com.querydsl:querydsl-apt:${querydsl_version}"
    annotationProcessor(
        "com.querydsl:querydsl-apt:${querydsl_version}:jpa",
        "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernate_jpa_api_version}",
        'javax.annotation:javax.annotation-api:1.3.2',
        'org.projectlombok:lombok'
    )

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation "io.swagger:swagger-annotations:1.6.2"

    // mapstruct
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"

    // zalando
    implementation 'org.zalando:problem-spring-web-starter:0.26.2'

    // mysql
    runtimeOnly 'mysql:mysql-connector-java'

    // flyway
    implementation 'org.flywaydb:flyway-core'

    // jackson
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.h2database:h2'
}

sourceSets {
    main.java.srcDir file("${project.buildDir.path}/generated/source/apt/main")
}

tasks.withType(JavaCompile){
    options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

task cleanResources(type: Delete) {
    delete 'build/resources'
    delete 'build/classes'
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

clean.doLast {
    file(generated).deleteDir()
}

test {
    useJUnitPlatform()
}
